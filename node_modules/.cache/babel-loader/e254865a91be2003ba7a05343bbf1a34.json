{"ast":null,"code":"import PropTypes from 'prop-types';\nimport createGrid from './createGrid';\n/**\n *\n * Demos:\n *\n * - [Grid (Material UI)](https://mui.com/material-ui/react-grid/)\n *\n * API:\n *\n * - [Grid API](https://mui.com/system/api/grid/)\n */\n\nconst Grid = createGrid();\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   */\n  lgOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   */\n  mdOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   */\n  smOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   */\n  xlOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `xs` breakpoint and wider screens if not overridden.\n   */\n  xsOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number])\n} : void 0;\nexport default Grid;","map":{"version":3,"sources":["E:/project/banhang/node_modules/@mui/system/esm/Unstable_Grid/Grid.js"],"names":["PropTypes","createGrid","Grid","process","env","NODE_ENV","propTypes","children","node","columns","oneOfType","arrayOf","number","object","columnSpacing","string","container","bool","direction","oneOf","lg","lgOffset","md","mdOffset","rowSpacing","sm","smOffset","spacing","sx","func","wrap","xl","xlOffset","xs","xsOffset"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAGD,UAAU,EAAvB;AACAE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCH,IAAI,CAACI;AAC7C;AADwC,EAEtC;AACA;AACA;AACA;AACA;;AAEA;AACF;AACA;AACEC,EAAAA,QAAQ,EAAEP,SAAS,CAACQ,IATpB;;AAWA;AACF;AACA;AACA;AACEC,EAAAA,OAAO,EAAET;AACT;AADkB,GAEjBU,SAFQ,CAEE,CAACV,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACY,MAA5B,CAAD,EAAsCZ,SAAS,CAACY,MAAhD,EAAwDZ,SAAS,CAACa,MAAlE,CAFF,CAfT;;AAmBA;AACF;AACA;AACA;AACEC,EAAAA,aAAa,EAAEd;AACf;AADwB,GAEvBU,SAFc,CAEJ,CAACV,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACe,MAA7B,CAApB,CAAlB,CAAD,EAA+Ef,SAAS,CAACY,MAAzF,EAAiGZ,SAAS,CAACa,MAA3G,EAAmHb,SAAS,CAACe,MAA7H,CAFI,CAvBf;;AA2BA;AACF;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAEhB,SAAS,CAACiB,IAhCrB;;AAkCA;AACF;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAElB;AACX;AADoB,GAEnBU,SAFU,CAEA,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,gBAAD,EAAmB,QAAnB,EAA6B,aAA7B,EAA4C,KAA5C,CAAhB,CAAD,EAAsEnB,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACmB,KAAV,CAAgB,CAAC,gBAAD,EAAmB,QAAnB,EAA6B,aAA7B,EAA4C,KAA5C,CAAhB,CAAlB,CAAtE,EAA8JnB,SAAS,CAACa,MAAxK,CAFA,CAvCX;;AA2CA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,EAAE,EAAEpB,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,EAA8CZ,SAAS,CAACiB,IAAxD,CAApB,CApDJ;;AAsDA;AACF;AACA;AACA;AACA;AACEI,EAAAA,QAAQ,EAAErB,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,CAApB,CA3DV;;AA6DA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,EAAE,EAAEtB,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,EAA8CZ,SAAS,CAACiB,IAAxD,CAApB,CAtEJ;;AAwEA;AACF;AACA;AACA;AACA;AACEM,EAAAA,QAAQ,EAAEvB,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,CAApB,CA7EV;;AA+EA;AACF;AACA;AACA;AACEY,EAAAA,UAAU,EAAExB;AACZ;AADqB,GAEpBU,SAFW,CAED,CAACV,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACe,MAA7B,CAApB,CAAlB,CAAD,EAA+Ef,SAAS,CAACY,MAAzF,EAAiGZ,SAAS,CAACa,MAA3G,EAAmHb,SAAS,CAACe,MAA7H,CAFC,CAnFZ;;AAuFA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,EAAE,EAAEzB,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,EAA8CZ,SAAS,CAACiB,IAAxD,CAApB,CAhGJ;;AAkGA;AACF;AACA;AACA;AACA;AACES,EAAAA,QAAQ,EAAE1B,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,CAApB,CAvGV;;AAyGA;AACF;AACA;AACA;AACA;AACEe,EAAAA,OAAO,EAAE3B;AACT;AADkB,GAEjBU,SAFQ,CAEE,CAACV,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACe,MAA7B,CAApB,CAAlB,CAAD,EAA+Ef,SAAS,CAACY,MAAzF,EAAiGZ,SAAS,CAACa,MAA3G,EAAmHb,SAAS,CAACe,MAA7H,CAFF,CA9GT;;AAkHA;AACF;AACA;AACEa,EAAAA,EAAE,EAAE5B,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAAC6B,IAAX,EAAiB7B,SAAS,CAACa,MAA3B,EAAmCb,SAAS,CAACiB,IAA7C,CAApB,CAAlB,CAAD,EAA6FjB,SAAS,CAAC6B,IAAvG,EAA6G7B,SAAS,CAACa,MAAvH,CAApB,CArHJ;;AAuHA;AACF;AACA;AACA;AACA;AACEiB,EAAAA,IAAI,EAAE9B,SAAS,CAACmB,KAAV,CAAgB,CAAC,QAAD,EAAW,cAAX,EAA2B,MAA3B,CAAhB,CA5HN;;AA8HA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEY,EAAAA,EAAE,EAAE/B,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,EAA8CZ,SAAS,CAACiB,IAAxD,CAApB,CAvIJ;;AAyIA;AACF;AACA;AACA;AACA;AACEe,EAAAA,QAAQ,EAAEhC,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,CAApB,CA9IV;;AAgJA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEqB,EAAAA,EAAE,EAAEjC,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,EAA8CZ,SAAS,CAACiB,IAAxD,CAApB,CAzJJ;;AA2JA;AACF;AACA;AACA;AACA;AACEiB,EAAAA,QAAQ,EAAElC,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4BnB,SAAS,CAACY,MAAtC,CAApB;AAhKV,CAFF,GAmKI,KAAK,CAnKT;AAoKA,eAAeV,IAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport createGrid from './createGrid';\n/**\n *\n * Demos:\n *\n * - [Grid (Material UI)](https://mui.com/material-ui/react-grid/)\n *\n * API:\n *\n * - [Grid API](https://mui.com/system/api/grid/)\n */\n\nconst Grid = createGrid();\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   */\n  lgOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   */\n  mdOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   */\n  smOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   */\n  xlOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n   * If 'auto', the grid item push itself to the right-end of the container.\n   * The value is applied for the `xs` breakpoint and wider screens if not overridden.\n   */\n  xsOffset: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number])\n} : void 0;\nexport default Grid;"]},"metadata":{},"sourceType":"module"}